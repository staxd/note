
————————————————————————————————————————————————————————————————————————————————————————
一、小程序获取系统时间

    //util.js

    function formatTime(date) {
      var year = date.getFullYear()
      var month = date.getMonth() + 1
      var day = date.getDate()

      var hour = date.getHours()
      var minute = date.getMinutes()
      var second = date.getSeconds()


      return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':')
    }

    function formatNumber(n) {
      n = n.toString()
      return n[1] ? n : '0' + n
    }

    module.exports = {
      formatTime: formatTime
    }

    //index.wxml
    const util = require('../../../utils/util.js')
    var time = util.formatTime(new Date());
          var year = time.substring(0, 4) //截取字符串




————————————————————————————————————————————————————————————————————————————————————————
二、页面返回

    var pages = getCurrentPages(); //获取当前页面js里面的pages里的所有信息。
    var currPage = pages[pages.length - 1];   //当前页面
    var prevPage = pages[pages.length - 2];  //-2上一个页面，-3是上上个页面以此类推。

    //直接调用上一个页面对象的setData()方法，把数据存到上一个页面中去
    prevPage.setData({
       patientList
    });

    //上一个页面内执行setData操作，将我们想要的信息保存住。当我们返回去的时候，页面已经处理完毕。
    //最后就是返回上一个页面。
    wx.navigateBack({
       delta: 1 // 返回上一级页面。
    })




————————————————————————————————————————————————————————————————————————————————————————
三、JOSON

    JSON.stringify(archiveList)//对象json转换成字符串json
    JSON.parse(archiveList)//字符串json转换成对象json





————————————————————————————————————————————————————————————————————————————————————————
四、添加元素
    （一）push()，concat()方法的区别
      1./*push()方法*/
        var array=[1,2,3,4,5];

        console.log(array);   //[1, 2, 3, 4, 5]

        array.push(6);        //一个参数
        console.log(array);   //[1, 2, 3, 4, 5, 6]

        array.push(6,7);      //两个参数
        console.log(array);   //[1, 2, 3, 4, 5, 6, 7]

        array.push([6,7]);    //参数为数组
        console.log(array);   //[1, 2, 3, 4, 5, 6, Array(2)]


      2./*concat()方法*/
        var array=[1,2,3,4,5];

        console.log(array);   //[1, 2, 3, 4, 5]

        var array2=array.concat(6);    //一个参数
        console.log(array);    //[1, 2, 3, 4, 5]
        console.log(array2);   //[1, 2, 3, 4, 5, 6]

        var array2=array.concat(6,7);    //两个参数
        console.log(array);    //[1, 2, 3, 4, 5]
        console.log(array2);   //[1, 2, 3, 4, 5, 6，7]

        var array2=array.concat([6,7]);    //参数为数组
        console.log(array);    //[1, 2, 3, 4, 5]
        console.log(array2);   //[1, 2, 3, 4, 5, 6, 7]




    （二）几种向数组中添加元素方法的性能比较 （越往下越慢）

      1.向数组结尾添加元素
        arry.push()

        var arr = [1,2,3,4,5];
        var arr2 = [];

        arr.push(6);    //方法1
        arr[arr.length] = 6;    //方法2
        arr2 = arr.concat([6]);  //方法3

      2.向数组的头部添加元素
        var arr = [1,2,3,4,5];

        arr.unshift(0); //方法1
        [0].concat(arr); //方法2

      3.向数组中间添加元素
        myArray.splice(2,0,'肾虚少年');
        console.log('用splice在数组指定位置插入元素：',myArray);

      4.汇总
        unshift：将参数添加到原数组开头，并返回数组的长度
        pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined
        push：将参数添加到原数组末尾，并返回数组的长度
        concat：返回一个新数组，是将参数添加到原数组中构成的
        splice(start,deleteCount,val1,val2,...)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,...
        reverse：将数组反序
        sort(orderfunction)：按指定的参数对数组进行排序
        slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组



————————————————————————————————————————————————————————————————————————————————————————

五、删除元素

这样就构造了这样一个函数，比如我有有一个数组：

?
1
var emp = ['abs','dsf','sdf','fd']
假如我们要删除其中的 'fd' ,就可以使用：

?
1
emp.remove('fd');



删除的数组的某一项

splice(index,len,[item]) 注释：该方法会改变原始数组。

splice有3个参数，它也可以用来替换/删除/添加数组内某一个或者几个值

index:数组开始下标 len: 替换/删除的长度 item:替换的值，删除操作的话 item为空

如：arr = ['a','b','c','d']

删除
//删除起始下标为1，长度为1的一个值(len设置1，如果为0，则数组不变) 
var arr = ['a','b','c','d']; 
arr.splice(1,1); 
console.log(arr); 
//['a','c','d']; 
//删除起始下标为1，长度为2的一个值(len设置2) 
var arr2 = ['a','b','c','d'] 
arr2.splice(1,2); 
console.log(arr2); 
//['a','d']

替换
//替换起始下标为1，长度为1的一个值为‘ttt'，len设置的1 
var arr = ['a','b','c','d']; 
arr.splice(1,1,'ttt'); 
console.log(arr);   
//['a','ttt','c','d'] 
var arr2 = ['a','b','c','d']; 
arr2.splice(1,2,'ttt'); 
console.log(arr2);   
//['a','ttt','d'] 替换起始下标为1，长度为2的两个值为‘ttt'，len设置的1
添加 ---- len设置为0，item为添加的值
var arr = ['a','b','c','d']; 
arr.splice(1,0,'ttt'); 
console.log(arr);   
//['a','ttt','b','c','d'] 表示在下标为1处添加一项'ttt'<span style="font-size:14px;font-family:Arial, Helvetica, sans-serif;background-color:rgb(255,255,255);"> </span>
delete方法删除掉数组中的元素后，会把该下标出的值置为undefined,数组的长度不会变
var arr = ['a','b','c','d']; 
delete arr[1]; 
arr; 
//["a", undefined × 1, "c", "d"] 中间出现两个逗号，数组长度不变，有一项为undefined












六、页面传值之 json报错



        //a页面
         var my = encodeURIComponent(JSON.stringify(res));
        wx.navigateTo({
          url:'../ticketmydetail/ticketmydetail?my=' + my
        })


        //b页面
        var my = decodeURIComponent(options.my);
        this.setData({
          myDetail : JSON.parse(my)
        })
————————————————————————————————————————————————————————————————————————————————————————
六、单选按钮

<view class='info_top'>
  <view data-id="{{index}}" bindtap='infoSelect' wx:for="{{infoTitile}}" wx:key="*this">{{item.title}}
  <view class="border {{item.select?'bg':''}}"></view>
  </view>
</view>

//js
infoTitile:[{
      background:"#fff",
      title:"全部",
      color:"#333",
      select: true
    }, {
        background: "#87aa66",
        title: "I 级",
        color: "#fff",
        select: false

      }]

infoSelect(e) {
    // console.log(e.currentTarget.dataset.id)
    var id = e.currentTarget.dataset.id
    var infoTitile = this.data.infoTitile
    for (let i in infoTitile) {
      if (i == id) {
        infoTitile[i].select = true
      } else {
        infoTitile[i].select = false
      }
    }
    this.setData({
      infoTitile
    })
  },


